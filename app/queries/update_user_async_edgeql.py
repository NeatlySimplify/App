# AUTOGENERATED FROM 'app/queries/update_user.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpdateUserResult(NoPydanticValidation):
    id: uuid.UUID


async def update_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    nome: str,
    sexo: str,
    estado_civil: str,
    details: str,
    nascimento: datetime.datetime,
    password: str,
    conta_ativa: bool,
    user: uuid.UUID,
) -> UpdateUserResult | None:
    return await executor.query_single(
        """\
        update User filter .id = <uuid>$user set{
            nome:= <str>$nome ?? .nome,
            sexo:= <str>$sexo ?? .sexo,
            estado_civil:= <str>$estado_civil ?? .estado_civil,
            details:= <str>$details ?? .details,
            nascimento:= <datetime>$nascimento ?? .nascimento,
            password:= <str>$password ?? .password,
            conta_ativa:= <bool>$conta_ativa ?? .conta_ativa,
        };\
        """,
        nome=nome,
        sexo=sexo,
        estado_civil=estado_civil,
        details=details,
        nascimento=nascimento,
        password=password,
        conta_ativa=conta_ativa,
        user=user,
    )
